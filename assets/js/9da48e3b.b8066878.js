(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{102:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return u}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),p=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},b=function(e){var n=p(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=p(t),m=a,u=b["".concat(i,".").concat(m)]||b[m]||d[m]||o;return t?r.a.createElement(u,s(s({ref:n},l),{},{components:t})):r.a.createElement(u,s({ref:n},l))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},93:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var a=t(3),r=t(7),o=(t(0),t(102)),i={title:"Migrate to v2.0",sidebar_label:"2.0"},s={unversionedId:"migration/2.0",id:"migration/2.0",isDocsHomePage:!1,title:"Migrate to v2.0",description:"Configuration",source:"@site/docs/migration/2.0.md",slug:"/migration/2.0",permalink:"/docs/migration/2.0",editUrl:"https://github.com/beemojs/beemo/edit/master/website/docs/migration/2.0.md",version:"current",sidebar_label:"2.0",sidebar:"docs",previous:{title:"Advanced",permalink:"/docs/advanced"}},c=[{value:"Configuration",id:"configuration",children:[{value:"Beemo configuration has moved",id:"beemo-configuration-has-moved",children:[]},{value:"Driver overrides have been removed from <code>package.json</code>",id:"driver-overrides-have-been-removed-from-packagejson",children:[]},{value:"Drivers configuration structure has changed",id:"drivers-configuration-structure-has-changed",children:[]}]},{value:"Beemo",id:"beemo",children:[{value:"File and type have moved",id:"file-and-type-have-moved",children:[]},{value:"Logging has been removed",id:"logging-has-been-removed",children:[]},{value:"Workspace methods have moved",id:"workspace-methods-have-moved",children:[]},{value:"Driver and script management has changed",id:"driver-and-script-management-has-changed",children:[]},{value:"Driver and script modules must export a factory function and have a name property",id:"driver-and-script-modules-must-export-a-factory-function-and-have-a-name-property",children:[]}]},{value:"Contexts",id:"contexts",children:[{value:"Options are now located in multiple locations",id:"options-are-now-located-in-multiple-locations",children:[]},{value:"Positional args are now referred to as params",id:"positional-args-are-now-referred-to-as-params",children:[]}]},{value:"Drivers",id:"drivers",children:[{value:"Jest: Peer dependency on Babel has been removed",id:"jest-peer-dependency-on-babel-has-been-removed",children:[]},{value:"TypeScript: The <code>--reference-workspaces</code> option has been removed",id:"typescript-the---reference-workspaces-option-has-been-removed",children:[]},{value:"TypeScript: Package project reference linking has moved to a new command",id:"typescript-package-project-reference-linking-has-moved-to-a-new-command",children:[]}]},{value:"Scripts",id:"scripts",children:[{value:"Script arguments are now based on <code>@boost/args</code>",id:"script-arguments-are-now-based-on-boostargs",children:[]},{value:"Script tasks have been removed",id:"script-tasks-have-been-removed",children:[]}]},{value:"TypeScript",id:"typescript",children:[]}],l={toc:c};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"configuration"},"Configuration"),Object(o.b)("h3",{id:"beemo-configuration-has-moved"},"Beemo configuration has moved"),Object(o.b)("p",null,"Previously, configuration was either defined in a root ",Object(o.b)("inlineCode",{parentName:"p"},"configs/beemo.js")," file, or a ",Object(o.b)("inlineCode",{parentName:"p"},"beemo")," block\nwithin ",Object(o.b)("inlineCode",{parentName:"p"},"package.json"),". Configuration must now be defined in ",Object(o.b)("inlineCode",{parentName:"p"},".config/beemo.ts")," (or ",Object(o.b)("inlineCode",{parentName:"p"},".js"),", ",Object(o.b)("inlineCode",{parentName:"p"},".json"),",\n",Object(o.b)("inlineCode",{parentName:"p"},".yaml"),", etc). Package level config has been removed entirely."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts",metastring:'title=".config/beemo.ts"',title:'".config/beemo.ts"'},"export default {\n  module: '<config-module>',\n};\n")),Object(o.b)("h3",{id:"driver-overrides-have-been-removed-from-packagejson"},"Driver overrides have been removed from ",Object(o.b)("inlineCode",{parentName:"h3"},"package.json")),Object(o.b)("p",null,"The ability to configure drivers in a ",Object(o.b)("inlineCode",{parentName:"p"},"beemo.<driver>")," block within ",Object(o.b)("inlineCode",{parentName:"p"},"package.json")," has been removed.\nInstead, configure the driver at ",Object(o.b)("inlineCode",{parentName:"p"},".config/beemo/<driver>.ts")," (or ",Object(o.b)("inlineCode",{parentName:"p"},".js"),")."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'// Before\n{\n  "beemo": {\n    "eslint": {\n      "rules": {\n        "no-console": "off"\n      }\n    }\n  }\n}\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts",metastring:'title=".config/beemo/eslint.ts"',title:'".config/beemo/eslint.ts"'},"// After\nimport { ESLintConfig } from '@beemo/driver-eslint';\n\nconst config: ESLintConfig = {\n  rules: {\n    'no-console': 'off',\n  },\n};\n\nexport default config;\n")),Object(o.b)("h3",{id:"drivers-configuration-structure-has-changed"},"Drivers configuration structure has changed"),Object(o.b)("p",null,"When configuring drivers with the ",Object(o.b)("inlineCode",{parentName:"p"},"drivers")," setting, either supply a list of names."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts",metastring:'title=".config/beemo.ts"',title:'".config/beemo.ts"'},"export default {\n  module: '<config-module>',\n  drivers: ['babel', 'jest'],\n};\n")),Object(o.b)("p",null,"Or a tuple with a name and an options object."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts",metastring:'title=".config/beemo.ts"',title:'".config/beemo.ts"'},"export default {\n  module: '<config-module>',\n  drivers: [\n    'babel',\n    [\n      'jest',\n      {\n        env: {\n          NODE_ENV: 'test',\n        },\n      },\n    ],\n  ],\n};\n")),Object(o.b)("p",null,"Or if you need more control, an object of names that map to booleans (enable or disable the driver),\nor an options object."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts",metastring:'title=".config/beemo.ts"',title:'".config/beemo.ts"'},"export default {\n  module: '<config-module>',\n  drivers: {\n    babel: true,\n    jest: {\n      env: {\n        NODE_ENV: 'test',\n      },\n    },\n  },\n};\n")),Object(o.b)("p",null,"The old format of mixing strings and objects within a list is no longer supported. For more\ninformation on these formats,\n",Object(o.b)("a",{parentName:"p",href:"https://boostlib.dev/docs/plugin#configuration-files"},"check out the official Boost documentation on plugins"),"."),Object(o.b)("h2",{id:"beemo"},"Beemo"),Object(o.b)("h3",{id:"file-and-type-have-moved"},"File and type have moved"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"Beemo")," class instance is no longer default exported from ",Object(o.b)("inlineCode",{parentName:"p"},"@beemo/core"),". It can now be accessed\nfrom the named ",Object(o.b)("inlineCode",{parentName:"p"},"Tool")," class export, or the ",Object(o.b)("inlineCode",{parentName:"p"},"BeemoTool")," type alias export."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"// Before\nimport Beemo from '@beemo/core';\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"// After\nimport { Tool } from '@beemo/core';\n")),Object(o.b)("h3",{id:"logging-has-been-removed"},"Logging has been removed"),Object(o.b)("p",null,"All logging methods have been removed. Use the native ",Object(o.b)("inlineCode",{parentName:"p"},"console")," instead."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"// Before\nbeemo.log();\nbeemo.log.error();\nbeemo.console.log();\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"// After\nconsole.log();\nconsole.error();\n")),Object(o.b)("h3",{id:"workspace-methods-have-moved"},"Workspace methods have moved"),Object(o.b)("p",null,"Methods relating to project workspaces have moved to the ",Object(o.b)("inlineCode",{parentName:"p"},"project")," class property. The APIs of these\nmethods may have also changed, so please refer to their TypeScript types."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"// Before\nbeemo.getWorkspacePaths();\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"// After\ntool.project.getWorkspacePaths();\n")),Object(o.b)("h3",{id:"driver-and-script-management-has-changed"},"Driver and script management has changed"),Object(o.b)("p",null,"Drivers and scripts have moved to a registry based pattern, resulting in changes to the ",Object(o.b)("inlineCode",{parentName:"p"},"Tool")," API."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"// Before\nbeemo.getPlugin('script', 'build');\nbeemo.getPlugin('driver', 'babel');\nbeemo.isPluginEnabled('driver', 'typescript');\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"// After\ntool.scriptRegistry.get('build');\ntool.driverRegistry.get('babel');\ntool.driverRegistry.isRegistered('typescript');\n")),Object(o.b)("h3",{id:"driver-and-script-modules-must-export-a-factory-function-and-have-a-name-property"},"Driver and script modules must export a factory function and have a name property"),Object(o.b)("p",null,"If you're using custom driver and script modules, they must now default export a function that\nreturns a class instance, instead of exporting a class declaration. Furthermore, all driver and\nscript instances must have a ",Object(o.b)("inlineCode",{parentName:"p"},"name")," property (which is the name of the NPM module)."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"// Before\nexport default class CustomDriver extends Driver<CustomConfig, CustomOptions> {}\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"// After\nclass CustomDriver extends Driver<CustomConfig, CustomOptions> {\n  readonly name = 'npm-module-name-driver';\n}\n\nexport default (options: CustomOptions) => new CustomDriver(options);\n")),Object(o.b)("h2",{id:"contexts"},"Contexts"),Object(o.b)("p",null,"With the migration from ",Object(o.b)("inlineCode",{parentName:"p"},"yargs")," to ",Object(o.b)("a",{parentName:"p",href:"https://boostlib.dev/docs/args"},"@boost/args"),", the args object\nstructure has changed, as well as any terminology."),Object(o.b)("h3",{id:"options-are-now-located-in-multiple-locations"},"Options are now located in multiple locations"),Object(o.b)("p",null,"Options are either known or unknown, depending on the CLI command being ran. Known options are now\naccessed from ",Object(o.b)("inlineCode",{parentName:"p"},"args.options"),", while unknown options from ",Object(o.b)("inlineCode",{parentName:"p"},"args.unknown"),". Since unknown options are\nwell, unknown, we have no information on what type of value they should be, so all unknown option\nvalues are ",Object(o.b)("em",{parentName:"p"},"always")," strings."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"// Before\ncontext.args.clean;\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"// After\ncontext.args.options.clean;\ncontext.args.unknown.clean;\n")),Object(o.b)("p",null,"To avoid having to check both of these locations, a new ",Object(o.b)("inlineCode",{parentName:"p"},"Context#getRiskyOption()")," method has been\nprovided. It will return the known option if it exists, otherwise unknown, and ",Object(o.b)("inlineCode",{parentName:"p"},"null")," if neither\nexists."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"context.getRiskyOption('clean');\n")),Object(o.b)("p",null,"However, this method is risky, as denoted by its name. For unknown options, empty string values are\nconverted to ",Object(o.b)("inlineCode",{parentName:"p"},"true"),", as they are treated as flags (",Object(o.b)("inlineCode",{parentName:"p"},"--clean"),"). If you want to avoid the conversion,\npass ",Object(o.b)("inlineCode",{parentName:"p"},"true")," as a 2nd argument."),Object(o.b)("h3",{id:"positional-args-are-now-referred-to-as-params"},"Positional args are now referred to as params"),Object(o.b)("p",null,"The title is self-explanatory. Args are now called params, and the argv list is now accessed from\n",Object(o.b)("inlineCode",{parentName:"p"},"args.params")," instead of ",Object(o.b)("inlineCode",{parentName:"p"},"args._"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"// Before\ncontext.args._;\ncontext.addArg('./src');\ncontext.addArgs(['foo', 'bar']);\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"// After\ncontext.args.params;\ncontext.addParam('./src');\ncontext.addParams(['foo', 'bar']);\n")),Object(o.b)("h2",{id:"drivers"},"Drivers"),Object(o.b)("h3",{id:"jest-peer-dependency-on-babel-has-been-removed"},"Jest: Peer dependency on Babel has been removed"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"@beemo/driver-babel")," peer dependency has been removed from the Jest driver's ",Object(o.b)("inlineCode",{parentName:"p"},"package.json"),",\nbut the Babel config will still be automatically generated when running Jest if the Babel driver has\nbeen enabled."),Object(o.b)("p",null,"If you're using Babel to transform files within your Jest tests, be sure to install both driver\ndependencies manually."),Object(o.b)("h3",{id:"typescript-the---reference-workspaces-option-has-been-removed"},"TypeScript: The ",Object(o.b)("inlineCode",{parentName:"h3"},"--reference-workspaces")," option has been removed"),Object(o.b)("p",null,"In previous versions, the ",Object(o.b)("inlineCode",{parentName:"p"},"--reference-workspaces")," CLI option would automatically generate project\nreferences in the root ",Object(o.b)("inlineCode",{parentName:"p"},"tsconfig.json"),", and a ",Object(o.b)("inlineCode",{parentName:"p"},"tsconfig.json")," in each package folder. Going forward,\nroot project references will now be linked automatically if a project is workspaces enabled (Yarn\nworkspaces, etc) instead of requiring a CLI option."),Object(o.b)("h3",{id:"typescript-package-project-reference-linking-has-moved-to-a-new-command"},"TypeScript: Package project reference linking has moved to a new command"),Object(o.b)("p",null,"As mentioned above, project references were automatically linked when running the TypeScript driver\nwith ",Object(o.b)("inlineCode",{parentName:"p"},"--reference-workspaces"),". However, this process was rather heavy and only needed to be ran when\nadding or removing packages, or changing dependencies. Because of this, package-level project\nreference linking has moved to a new command, ",Object(o.b)("inlineCode",{parentName:"p"},"beemo typescript:sync-project-refs"),"."),Object(o.b)("p",null,"This new command will only update the ",Object(o.b)("inlineCode",{parentName:"p"},"tsconfig.json")," within each package, as the root\n",Object(o.b)("inlineCode",{parentName:"p"},"tsconfig.json")," is still updated when running ",Object(o.b)("inlineCode",{parentName:"p"},"beemo typescript"),"."),Object(o.b)("h2",{id:"scripts"},"Scripts"),Object(o.b)("h3",{id:"script-arguments-are-now-based-on-boostargs"},"Script arguments are now based on ",Object(o.b)("inlineCode",{parentName:"h3"},"@boost/args")),Object(o.b)("p",null,"To support the new functionality provided by ",Object(o.b)("a",{parentName:"p",href:"https://boostlib.dev/docs/args#parsing"},"@boost/args"),",\nthe ",Object(o.b)("inlineCode",{parentName:"p"},"args()")," method has been renamed to ",Object(o.b)("inlineCode",{parentName:"p"},"parse()"),", and the return type/structure has changed to\n",Object(o.b)("inlineCode",{parentName:"p"},"ParserOptions"),". Furthermore, the 2nd argument to ",Object(o.b)("inlineCode",{parentName:"p"},"execute()")," has updated to the type/structure of\n",Object(o.b)("inlineCode",{parentName:"p"},"Arguments"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"// Before\nclass BuildScript extends Script {\n  args() {\n    return {\n      string: ['workspaces'],\n      default: {\n        workspaces: '',\n      },\n    };\n  }\n}\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"// After\nclass BuildScript extends Script {\n  parse() {\n    return {\n      options: {\n        workspaces: {\n          description: 'Glob pattern to find workspaces',\n          type: 'string',\n        },\n      },\n    };\n  }\n}\n")),Object(o.b)("h3",{id:"script-tasks-have-been-removed"},"Script tasks have been removed"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"executeTasks()")," and ",Object(o.b)("inlineCode",{parentName:"p"},"task()")," methods have been removed. If you would like similar\nfunctionality, we suggest using the ",Object(o.b)("a",{parentName:"p",href:"https://boostlib.dev/docs/pipeline"},"@boost/pipeline")," package\ndirectly."),Object(o.b)("h2",{id:"typescript"},"TypeScript"),Object(o.b)("p",null,"Only including important type changes."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Migrated ",Object(o.b)("inlineCode",{parentName:"li"},"Arguments")," to ",Object(o.b)("inlineCode",{parentName:"li"},"@boost/args")," structure."),Object(o.b)("li",{parentName:"ul"},"Removed the generic from ",Object(o.b)("inlineCode",{parentName:"li"},"Tool")," (formerly ",Object(o.b)("inlineCode",{parentName:"li"},"Beemo"),")."),Object(o.b)("li",{parentName:"ul"},"Removed:",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"BeemoPluginRegistry")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ExecuteType")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ExecuteQueue")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"StdioType"))))))}p.isMDXComponent=!0}}]);