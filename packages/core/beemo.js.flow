import { Module, Plugin } from 'boost';

declare module '@beemo/core' {
  import type { Event, EventListener, Tool, Reporter } from 'boost';
  import typeof Yargs from 'yargs';

  declare export type Context = {|
    args: string[],
    configRoot: string,
    root: string,
    yargs: Object,
  |};

  declare export type DriverContext = {|
    ...Context,
    configPaths: string[],
    drivers: Driver[],
    primaryDriver: Driver,
  |};

  declare export type ScriptContext = {|
    ...Context,
    script: ?Script,
    scriptName: string,
    scriptPath: string,
  |};

  declare export type Execution = {
    cmd: string,
    code: string | number,
    failed: boolean,
    killed?: boolean,
    signal: ?number,
    stderr: string,
    stdout: string,
    timedOut: boolean,
  };

  declare export type DriverMetadata = {
    bin: string,
    configName: string,
    configOption: string,
    dependencies: string[],
    description: string,
    helpOption: string,
    title: string,
    useConfigOption: boolean,
  };

  declare export type DriverOptions = {
    args: string[],
    dependencies: string[],
    env: { [key: string]: string },
  };

  declare export class Script extends Module<Object> {
    parse(): Object;
    run(options: Object, tool: Tool<Driver, Reporter<Object>>): Promise<*>;
  }

  declare export class Driver extends Plugin<DriverOptions> {
    metadata: DriverMetadata;
    options: DriverOptions;

    constructor(options?: Object): this;
    bootstrapCommand(command: Yargs): void;
    formatFile(data: Object): string;
    handleFailure(error: Execution): void;
    handleSuccess(response: Execution): void;
    mergeConfig(prev: Object, next: Object): Object;
    on(eventName: string, listener: EventListener): this;
    setMetadata(metadata: Object): this;
  }

  declare export default class Beemo {
    argv: string[];
    tool: Tool<Driver, Reporter<Object>>;

    constructor(argv: string[]): this;
    createContext<T: Object>(context?: Object, slice?: number): T;
    getConfigModuleRoot(): string;
    executeDriver(driverName: string): Promise<*>;
    executeScript(scriptName: string): Promise<*>;
    syncDotfiles(): Promise<*>;
  }
}
